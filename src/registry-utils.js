import { Octokit } from "@octokit/core";
import yaml from "js-yaml";

const octokit = new Octokit({
    auth: process.env.GITHUB_TOKEN,
});

const exampleRegistry = [
    {
        title: "Alibaba Cloud Log Service Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/alibabacloudlogserviceexporter",
        license: "Apache 2.0",
        description:
            "The Alibaba Cloud Log Service Exporter for the OpenTelemetry Collector.",
        authors: "Alibaba Cloud",
        otVersion: "latest",
    },
    {
        title: "Carbon Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/carbonexporter",
        license: "Apache 2.0",
        description: "The Carbon Exporter for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Datadog Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/datadogexporter",
        license: "Apache 2.0",
        description: "The Datadog Exporter for the OpenTelemetry Collector.",
        authors: "Datadog",
        otVersion: "latest",
    },
    {
        title: "Azure Monitor Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/azuremonitorexporter",
        license: "Apache 2.0",
        description:
            "The Azure Monitor Exporter for the OpenTelemetry Collector.",
        authors: "Microsoft",
        otVersion: "latest",
    },
    {
        title: "Google Cloud Pubsub Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/googlecloudpubsubexporter",
        license: "Apache 2.0",
        description:
            "This exporter sends OTLP messages to a Google Cloud Pubsub topic.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Trace ID aware load-balancing Collector Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/loadbalancingexporter",
        license: "Apache 2.0",
        description:
            "The Trace ID aware load-balancing for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "OTLP HTTP Collector Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlphttpexporter",
        license: "Apache 2.0",
        description: "The OTLP HTTP Exporter for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Dataset Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/datasetexporter",
        license: "Apache 2.0",
        description: "The Dataset Exporter for the OpenTelemetry Collector.",
        authors: "Dataset",
        otVersion: "latest",
    },
    {
        title: "Loki Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/lokiexporter",
        license: "Apache 2.0",
        description: "The OpenTelemetry Collector Exporter for Loki",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Kinesis Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "go",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/awskinesisexporter",
        license: "Apache 2.0",
        description: "The OpenTelemetry Kinesis Exporter for Go.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Sumo Logic Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/sumologicexporter",
        license: "Apache 2.0",
        description: "The OpenTelemetry Collector Exporter for Sumo Logic",
        authors: "Sumo Logic",
        otVersion: "latest",
    },
    {
        title: "Logging Collector Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/loggingexporter",
        license: "Apache 2.0",
        description: "The Logging Exporter for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "OTLP gRPC Collector Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlpexporter",
        license: "Apache 2.0",
        description: "The OTLP gRPC Exporter for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Kinesis Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "go",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/awskinesisexporter",
        license: "Apache 2.0",
        description: "The OpenTelemetry Kinesis Exporter for Go.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Google Managed Service for Prometheus Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/googlemanagedprometheusexporter",
        license: "Apache 2.0",
        description:
            "This exporter can be used to send metrics and traces to Google Cloud Managed Service for Prometheus.",
        authors: "Google",
        otVersion: "latest",
    },
    {
        title: "Google StackDrive Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "rust",
        tags: ["rust", "exporter"],
        repo: "https://github.com/vivint-smarthome/opentelemetry-stackdriver",
        license: "Apache 2.0 OR MIT",
        description: "A Rust OpenTelemetry exporter for Google StackDriver",
        authors: "jacobkiesel",
        otVersion: "0.5.0",
    },
    {
        title: "opentelemetry-exporter-otlp-grpc",
        registryType: "exporter",
        isThirdParty: false,
        language: "ruby",
        tags: ["otlpgrpc", "exporter", "ruby"],
        repo: "https://github.com/open-telemetry/opentelemetry-ruby/tree/main/exporter/otlp-grpc",
        license: "Apache 2.0",
        description:
            "The `opentelemetry-exporter-otlp-grpc` gem provides an OTLP exporter over gRPC for OpenTelemetry Ruby.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "opentelemetry-exporter-otlp",
        registryType: "exporter",
        isThirdParty: false,
        language: "ruby",
        tags: ["otlp", "exporter", "ruby"],
        repo: "https://github.com/open-telemetry/opentelemetry-ruby/tree/main/exporter/otlp",
        license: "Apache 2.0",
        description:
            "The opentelemetry-exporter-otlp gem provides an OTLP exporter for OpenTelemetry Ruby.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "opentelemetry-exporter-jaeger",
        registryType: "exporter",
        isThirdParty: false,
        language: "ruby",
        tags: ["jaeger", "exporter", "ruby"],
        repo: "https://github.com/open-telemetry/opentelemetry-ruby/tree/main/exporter/jaeger",
        license: "Apache 2.0",
        description:
            "The opentelemetry-exporter-jaeger gem provides a Jaeger exporter for OpenTelemetry Ruby",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "zipkinjson",
        registryType: "exporter",
        isThirdParty: false,
        language: "python",
        tags: ["zipkinjson", "exporter", "python"],
        repo: "https://github.com/open-telemetry/opentelemetry-python/tree/main/exporter/opentelemetry-exporter-zipkin-json",
        license: "Apache 2.0",
        description:
            "This library allows export of tracing data to Zipkin using JSON for serialization.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "OTLP Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "rust",
        tags: ["rust", "exporter"],
        repo: "https://github.com/open-telemetry/opentelemetry-rust/tree/main/opentelemetry-otlp",
        license: "Apache 2.0",
        description:
            "This library allows exporting telemetry data in the OpenTelemetry Protocol (OTLP) format to the OpenTelemetry Collector and OTLP-compliant backends/receivers.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "opentelemetry-exporter-zipkin",
        registryType: "exporter",
        isThirdParty: false,
        language: "ruby",
        tags: ["zipkin", "exporter", "ruby"],
        repo: "https://github.com/open-telemetry/opentelemetry-ruby/tree/main/exporter/zipkin",
        license: "Apache 2.0",
        description:
            "The opentelemetry-exporter-zipkin gem provides a Zipkin exporter for OpenTelemetry Ruby.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Azure Application Insights Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "rust",
        tags: ["rust", "exporter"],
        repo: "https://github.com/frigus02/opentelemetry-application-insights",
        license: "MIT",
        description: "OpenTelemetry exporter for Azure Application Insights",
        authors: "Jan Kuehle",
        otVersion: "latest",
    },
    {
        title: "otlpprotogrpc",
        registryType: "exporter",
        isThirdParty: false,
        language: "python",
        tags: ["otlpprotogrpc", "exporter", "python"],
        repo: "https://github.com/open-telemetry/opentelemetry-python/tree/main/exporter/opentelemetry-exporter-otlp-proto-grpc",
        license: "Apache 2.0",
        description:
            "This library allows to export data to the OpenTelemetry Collector using the OpenTelemetry Protocol using protobuf over gRPC.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Jaeger Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "java",
        tags: ["java", "exporter"],
        repo: "https://github.com/open-telemetry/opentelemetry-java/tree/main/exporters/jaeger",
        license: "Apache 2.0",
        description:
            "This library allows to export data using the Jaeger gRPC Protocol.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Jaeger Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "python",
        tags: ["python", "exporter"],
        repo: "https://github.com/open-telemetry/opentelemetry-python/tree/main/exporter/opentelemetry-exporter-jaeger",
        license: "Apache 2.0",
        description: "The OpenTelemetry Jaeger Exporter for Python.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Azure Monitor Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "dotnet",
        tags: [".net", "exporter", "Azure Monitor", "Application Insights"],
        repo: "https://github.com/Azure/azure-sdk-for-net/tree/main/sdk/monitor/Azure.Monitor.OpenTelemetry.Exporter",
        license: "MIT License",
        description: "The OpenTelemetry Azure Monitor Exporter for .NET",
        authors: "Microsoft Authors",
        otVersion: "latest",
    },
    {
        title: "Prometheus Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "python",
        tags: ["python", "exporter"],
        repo: "https://github.com/open-telemetry/opentelemetry-python/tree/main/exporter/opentelemetry-exporter-prometheus",
        license: "Apache 2.0",
        description:
            "This library allows to export metrics data to Prometheus.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "zipkinprotohttp",
        registryType: "exporter",
        isThirdParty: false,
        language: "python",
        tags: ["zipkinprotohttp", "exporter", "python"],
        repo: "https://github.com/open-telemetry/opentelemetry-python/tree/main/exporter/opentelemetry-exporter-zipkin-proto-http",
        license: "Apache 2.0",
        description:
            "This library allows export of tracing data to Zipkin using protobuf for serialization.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Active Directory Domain Services Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/activedirectorydsreceiver",
        license: "Apache 2.0",
        description:
            "The active_directory_ds receiver scrapes metric relating to an Active Directory domain controller using the Windows Performance Counters.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Routing Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/routingprocessor",
        license: "Apache 2.0",
        description:
            "The Routing Processor for the OpenTelemetry Collector will read a header from the incoming HTTP request (gRPC or plain HTTP) and direct the trace information to specific exporters based on the attribute's value.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Logz.io Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/logzioexporter",
        license: "Apache 2.0",
        description: "The OpenTelemetry Collector Exporter for Logz.io",
        authors: "Logz.io",
        otVersion: "latest",
    },
    {
        title: "Sentry Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/sentryexporter",
        license: "Apache 2.0",
        description: "The Sentry Exporter for the OpenTelemetry Collector.",
        authors: "Sentry",
        otVersion: "latest",
    },
    {
        title: "SkyWalking gRPC Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/skywalkingexporter",
        license: "Apache 2.0",
        description:
            "Exports data via gRPC using skywalking-data-collect-protocol format. By default, this exporter requires TLS and offers queued retry capabilities.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Splunk APM (SAPM) Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "go",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/sapmexporter",
        license: "Apache 2.0",
        description: "The OpenTelemetry Splunk APM Exporter for Go.",
        authors: "Splunk Authors",
        otVersion: "latest",
    },
    {
        title: "Apache Web Server Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/apachereceiver",
        license: "Apache 2.0",
        description:
            "This receiver fetches stats from a Apache Web Server instance using the server-status?auto endpoint.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "AWS S3 Exporter for OpenTelemetry Collector",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["awss3", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/awss3exporter",
        license: "Apache 2.0",
        description:
            "This exporter targets to support proto/json and proto/binary format",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "OpenCensus Collector Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/opencensusexporter",
        license: "Apache 2.0",
        description: "The OpenCensus Exporter for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Attribute Collector Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/attributesprocessor",
        license: "Apache 2.0",
        description:
            "The Attribute Processor for the OpenTelemetry Collector modifies attributes of a span.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Metrics Transform Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/metricstransformprocessor",
        license: "Apache 2.0",
        description:
            "The Metrics Transform Processor for the OpenTelemetry Collector can be used to rename metrics, and add, rename or delete label keys and values. It can also be used to perform aggregations on metrics across labels or label values.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Filter Collector Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor",
        license: "Apache 2.0",
        description:
            "The Filter Processor for the OpenTelemetry Collector can be configured to include or exclude metrics.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Memory Limiter Collector Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/memorylimiterprocessor",
        license: "Apache 2.0",
        description:
            "The Memory Limiter Processor for the OpenTelemetry Collector is used to prevent out of memory situations on the collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Splunk SAPM Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/sapmexporter",
        license: "Apache 2.0",
        description:
            "The Splunk SAPM Exporter for the OpenTelemetry Collector.",
        authors: "Splunk",
        otVersion: "latest",
    },
    {
        title: "Pulsar Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/pulsarexporter",
        license: "Apache 2.0",
        description:
            "Pulsar exporter exports logs, metrics, and traces to Pulsar. This exporter uses a synchronous producer",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Span Collector Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/spanprocessor",
        license: "Apache 2.0",
        description:
            "The Span Processor for the OpenTelemetry Collector modifies either the span name or attributes of a span based on the span name.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Jaeger Thrift Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/jaegerthrifthttpexporter",
        license: "Apache 2.0",
        description:
            "The Jaeger Thrift Exporter for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Group by Trace Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/groupbytraceprocessor",
        license: "Apache 2.0",
        description:
            "The Group by Trace Processor for the OpenTelemetry Collector collects all the spans from the same trace, waiting a pre-determined amount of time before releasing the trace to the next processor.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "OTLP JSON File Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/otlpjsonfilereceiver",
        license: "Apache 2.0",
        description:
            "This receiver will read pipeline data from JSON files. The data is written in",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Cumulative to Delta Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/cumulativetodeltaprocessor",
        license: "Apache 2.0",
        description:
            "The cumulative to delta processor converts monotonic, cumulative sum and histogram metrics to monotonic, delta metrics. Non-monotonic sums and exponential histograms are excluded.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Group by Attributes processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/groupbyattrsprocessor",
        license: "Apache 2.0",
        description:
            'This processor re-associates spans, log records and metric datapoints to a Resource that matches with the specified attributes. As a result, all spans, log records or metric datapoints with the same values for the specified attributes are "grouped" under the same Resource.',
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "MySQL Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/mysqlreceiver",
        license: "Apache 2.0",
        description:
            "This receiver queries MySQL's global status and InnoDB tables.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Instana Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/instanaexporter",
        license: "Apache 2.0",
        description: "The Instana Exporter for the OpenTelemetry Collector.",
        authors: "Instana Authors",
        otVersion: "latest",
    },
    {
        title: "SignalFx Collector Exporter",
        registryType: "exporter",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/signalfxexporter",
        license: "Apache 2.0",
        description: "The SignalFx Exporter for the OpenTelemetry Collector.",
        authors: "Splunk",
        otVersion: "latest",
    },
    {
        title: "Websocket Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["remoteobserver", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/remoteobserverprocessor",
        license: "Apache 2.0",
        description:
            "The WebSocket processor, which can be positioned anywhere in a pipeline, allows data to pass through to the next component.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "File Stats Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["filestats", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filestatsreceiver",
        license: "Apache 2.0",
        description:
            "The File Stats receiver collects metrics from files specified with a glob pattern.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "File Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["file", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filereceiver",
        license: "Apache 2.0",
        description:
            "The File Receiver reads the output of a File Exporter, converting that output to metrics, and sending the metrics down the pipeline.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Datadog Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["datadog", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/datadogprocessor",
        license: "Apache 2.0",
        description:
            "The Datadog Processor can be used to compute Datadog APM Stats pre-sampling.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Elasticsearch Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/elasticsearchreceiver",
        license: "Apache 2.0",
        description:
            "This receiver queries the Elasticsearch node stats and index statsendpoints in order to scrape metrics from a running elasticsearch cluster.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "AWS ECS Container Metrics Collector Receiver",
        registryType: "receiver",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsecscontainermetricsreceiver",
        license: "Apache 2.0",
        description:
            "The AWS ECS Container Metrics Receiver for the OpenTelemetry Collector reads task metadata and docker stats from Amazon ECS Task Metadata Endpoint, and generates resource usage metrics (such as CPU, memory, network, and disk) from them.",
        authors: "Amazon Web Services",
        otVersion: "latest",
    },
    {
        title: "Cloudflare Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["cloudflare", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/cloudflarereceiver",
        license: "Apache 2.0",
        description:
            "This Cloudflare receiver allows Cloudflare's LogPush Jobs to send logs from the Cloudflare logs aggregation system",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Probabilistic Sampling Collector Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/probabilisticsamplerprocessor",
        license: "Apache 2.0",
        description:
            "The Probabilistic Sampling Processor for the OpenTelemetry Collector provides probabilistic sampling of traces.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Delta to Rate Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/deltatorateprocessor",
        license: "Apache 2.0",
        description:
            "The delta to rate processor converts delta sum metrics to rate metrics. This rate is a gauge.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Span Metrics Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/spanmetricsprocessor",
        license: "Apache 2.0",
        description:
            "The Span Metrics Processor for the OpenTelemetry Collector aggregates Request, Error and Duration (R.E.D) metrics from span data.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "AWS Kinesis Data Firehose Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsfirehosereceiver",
        license: "Apache 2.0",
        description:
            "Receiver for ingesting AWS Kinesis Data Firehose delivery stream messages and parsing the records received based on the configured record type.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Expvar Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/expvarreceiver",
        license: "Apache 2.0",
        description: "An Expvar Receiver scrapes metrics from expvar",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Aerospike Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/aerospikereceiver",
        license: "Apache 2.0",
        description:
            "The Aerospike receiver is designed to collect performance metrics from one or more Aerospike nodes.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Kubernetes Events Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8seventsreceiver",
        license: "Apache 2.0",
        description:
            "The Kubernetes Events receiver collects events from the Kubernetes",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Prometheus Remote Write Collector Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/prometheusremotewriteexporter",
        license: "Apache 2.0",
        description:
            "The Prometheus Remote Write Exporter for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Host Metrics Collector Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/hostmetricsreceiver",
        license: "Apache 2.0",
        description:
            "The Host Metrics Receiver for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "CollectD Collector Receiver",
        registryType: "receiver",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/collectdreceiver",
        license: "Apache 2.0",
        description:
            "The CollectD Receiver for the OpenTelemetry Collector can receive data exported by the CollectD's write_http plugin.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Fluent Forward Collector Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/fluentforwardreceiver",
        license: "Apache 2.0",
        description:
            "The Fluent Forward Receiver for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Cloudwatch Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awscloudwatchreceiver",
        license: "Apache 2.0",
        description:
            "Receives Cloudwatch events from AWS CloudWatch via the AWS SDK for Cloudwatch Logs",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "AWS X-Ray Collector Receiver",
        registryType: "receiver",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/awsxrayreceiver",
        license: "Apache 2.0",
        description:
            "The AWS X-Ray Receiver for the OpenTelemetry Collector accepts segments (i.e. spans) in the X-Ray Segment format. This enables the collector to receive spans emitted by the existing X-Ray SDK.",
        authors: "Amazon Web Services",
        otVersion: "latest",
    },
    {
        title: "OpenCensus Collector Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/opencensusreceiver",
        license: "Apache 2.0",
        description: "The OpenCensus Receiver for the OpenTelemetry Collector.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "HTTP Check Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/httpcheckreceiver",
        license: "Apache 2.0",
        description:
            "The HTTP Check Receiver can be used for synthetic checks against HTTP endpoints. This receiver will make a request to the specified `endpoint` using the",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Loki Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["loki", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/lokireceiver",
        license: "Apache 2.0",
        description: "The Loki receiver implements the Loki Push API",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Apache Spark Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["apachespark", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/apachesparkreceiver",
        license: "Apache 2.0",
        description:
            "This receiver fetches metrics for an Apache Spark cluster through the Apache Spark REST API",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Filelog Collector Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/filelogreceiver",
        license: "Apache 2.0",
        description:
            "The Filelog Receiver tails and parses logs from files using the opentelemetry-log-collection library.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "CouchDB Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/couchdbreceiver",
        license: "Apache 2.0",
        description: "This receiver fetches stats from a couchdb server.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Schema Transformer Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/schemaprocessor",
        license: "Apache 2.0",
        description:
            "The Schema Processor is used to convert existing telemetry data or signals to a version of the semantic convention defined as part of the configuration.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Prometheus Exec Receiver",
        registryType: "receiver",
        isThirdParty: true,
        language: "collector",
        tags: ["go", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusexecreceiver",
        license: "Apache 2.0",
        description:
            "The Prometheus Exec Receiver for the OpenTelemetry Collector makes it easy for a user to collect metrics from third-party services via Prometheus exporters.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Webhook Event Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["webhookevent", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/webhookeventreceiver",
        license: "Apache 2.0",
        description:
            "The Webhook Event receiver is meant to act as a generally available push based receiver for any webhook style data source.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Azure Monitor Receiver",
        registryType: "receiver",
        isThirdParty: false,
        language: "collector",
        tags: ["azuremonitor", "receiver", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/azuremonitorreceiver",
        license: "Apache 2.0",
        description:
            "This receiver scrapes Azure Monitor API for resources metrics.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "Metrics Generation Processor",
        registryType: "processor",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "processor", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/metricsgenerationprocessor",
        license: "Apache 2.0",
        description:
            "The metrics generation processor can be used to create new metrics using existing metrics following a given rule. Currently it supports following two approaches for creating a new metric.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
    {
        title: "TencentCloud LogService Exporter",
        registryType: "exporter",
        isThirdParty: false,
        language: "collector",
        tags: ["go", "exporter", "collector"],
        repo: "https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/tencentcloudlogserviceexporter",
        license: "Apache 2.0",
        description:
            "This exporter supports sending OpenTelemetry log data to LogService.",
        authors: "OpenTelemetry Authors",
        otVersion: "latest",
    },
];

const getRegistry = async () => {
    const registryRequest = await octokit.request(
        "GET /repos/{owner}/{repo}/contents/{path}",
        {
            owner: "open-telemetry",
            repo: "opentelemetry.io",
            path: "data/registry",
            headers: {
                "X-GitHub-Api-Version": "2022-11-28",
            },
        }
    );
    const registry = [];
    await Promise.all(
        registryRequest.data.map(async (registryItem) => {
            const registryItemRequest = await (
                await fetch(registryItem.download_url)
            ).text();
            const registryItemParsed = yaml.load(registryItemRequest);
            if (
                registryItemParsed.registryType &&
                (registryItemParsed.registryType == "receiver" ||
                    registryItemParsed.registryType == "processor" ||
                    registryItemParsed.registryType == "exporter")
            ) {
                registry.push({
                    id: registryItem.download_url,
                    content: registryItemParsed,
                });
            }
        })
    );
    return registry;
};

const getMockRegistry = () => {
    return exampleRegistry;
};

export { getRegistry, getMockRegistry };
